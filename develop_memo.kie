.script2asm
人間にわかりやすいスクリプトを、
アセンブリ言語に変換するプログラム。

アセンブリ言語を直接書く場合と比べて実行速度は劣っても、
直感的に開発ができるようにすることを目指す。

アセンブリに対応するスクリプトの行をコメントで入れる、
「対訳モード」を用意する。
..基本的な処理の方針
スクリプトファイルは、
読み進めるだけで後戻りしなくてもいいようにする。

基本的に1行ずつ、式なら式の処理、制御構文ならその処理、
のように変換していく。

入出力は、標準ライブラリを用意する。
標準ライブラリからmain関数を呼び出し、
ユーザーのプログラムを実行させる。
...出力アセンブリのイメージ
 .code16gcc

 .org 0x0500

___start:
	# 必要なら標準ライブラリの初期化
	# main関数を呼ぶ
	callw main
___hlt_loop:
	hlt
	jmp ___hlt_loop

# 標準ライブラリ

getchar:
	# 1文字読み込む
	retw

putchar:
	# 1文字書き出す
	retw

# 変換されたプログラムをこの下に結合する

main:
	# プログラム
	retw
..コメント
1行コメントは変換処理の前に文字列処理で消される。
複数行コメントの中では、コメントフラグを立て、
複数行コメントの開始/終了以外の変換処理を行わない。
...1行コメント
// コメント
; コメント
# コメント
...複数行コメント
comment
	コメント
	コメント
	コメント
endcomment

C言語の/* 〜 */のような形ではなく、
commentとendcommentは1行に書かないといけない。
(他の制御構文や関数の宣言と同じキーワード扱い)
コメントのネストにも対応させる。
..識別子
^[a-zA-Z_][0-9a-zA-Z_]*$にマッチするものが有効。

ただし、最初の3文字が_であるものは内部で使用するため、
ユーザーが使用すると不都合の原因となる。
..式
C言語っぽい式を書けるようにする。
ただし、三項演算子はC言語とは違い、
{条件,真のとき評価する式,偽のとき評価する式}
という形式にする。
論理演算の短絡評価は行う。
...文字/文字列
C言語っぽく書けるようにする。
ただし、\(8進数)というエスケープシーケンスは実装しない。

文字('a')の型は2バイト符号あり整数
文字列("a")の型は1バイト符号なし整数へのポインタ

文字列の「実体」は別途適当な場所に置く。
..型
型は整数、ポインタ、配列の3種類。
構造体を実装するかは未定。

例えば、

・整数
・整数のポインタ
・整数の配列(5要素)
・整数の配列(5要素)の配列(10要素)
・整数のポインタの配列(5要素)

のようなイメージで、リストのように管理する。
...整数の型名(暫定)
実装する

char	1バイト符号なし
byte	1バイト符号なし
schar	1バイト符号あり
short	2バイト符号あり
word	2バイト符号なし

余裕があれば実装する

int		4バイト符号あり
dword	4バイト符号なし
...構文
配列アクセスやポインタアクセスで取り出せる順に左から書く。

例えば、
"[10][5]*int"型の変数hogeがあった場合、

"hoge[i]"は"[5]*int"型で、iは[0,10)の整数が有効
"hoge[i][j]は"*int"型で、jは[0,5)の整数が有効
"*hoge[i][j]"は"int"型

※演算子の優先順位で、[]の方が*より先に処理されるように
....例
・整数
　int

・整数のポインタ
　*int

・整数の配列(5要素)
　[5]int

・整数の配列(5要素)の配列(10要素)
　[10][5]int
　
・整数のポインタの配列(5要素)
　[5]*int
..グローバル変数
関数の外で

global
	hoge int
endglobal

のように、global〜endglobalの中で宣言を行う。
..関数
Haskell的な意味ではなく、C言語的な意味での関数。
...構文
コード変換の概要。
....宣言
function hoge int
parameters
	foo int
	bar int
variables
	hoge int
procedure
	work0
endfunction

----------

hoge : 関数名
hogeのあとのint : 戻り値の型
foo,bar : 仮引数の名前
hoge : ローカル変数の名前
int : ここに型名を書く

parameters/variablesは、無いなら省略可能
....分割宣言
C言語の「プロトタイプ宣言」に相当する。

// 「プロトタイプ宣言」に相当する
function hoge int
parameters
	foo int
	bar int
endfunction

// 実際の処理を記述する
function hoge
variables
	hoge int
procedure
	work0
endfunction
....変換後の出力
hoge:
	push %bp
	mov %sp,%bp
	sub $2,%sp
	work0
	push $0
___function_hoge_end:
	pop %ax
	add $2,%sp
	pop %bp
	ret

return A があったら、
push $0の代わりにAを評価した値をpushし、
___function_hoge_endに飛ぶ。
....アセンブリ直書き
function hoge int
parameters
	foo int
	bar int
assembly
	work0
	work1
endfunction

通常の関数でprocedureと書くところにassemblyと書き、
関数の内容全て(ローカル変数用の領域の確保〜retw)を
直接書く。
関数名のラベルが貼られたあと、それがそのまま出力される。
分割宣言も可能。

「インラインアセンブラ」ではない。
...実行方法
実際に実行する上でのメモ。

C言語のパクリ。
....呼び出し方
1. スタックに引数のデータを積む。
この時、先に書かれている引数のデータほど、
スタックで手前になる(後でpushする)ようにする。

2. callで呼び出す
....実行の初期化
関数が呼ばれた時
1. %bpをpushし、%spの値を%bpに代入する。
2. %spの値を減算し、ローカル変数の領域を確保する

この処理により、いくらスタックを使用しても、
%spの値を気にせずに引数やローカル変数にアクセスできる。

スタックには戻り先のアドレスと
%bpのバックアップが積まれているため、
引数/ローカル変数のサイズが2バイトのとき、
%bpに一番近い引数は4(%bp)、
%bpに一番近いローカル変数は-2(%bp)となる。
また、%bpに二番目に近い引数は6(%bp)、
%bpに二番目に近いローカル変数は-4(%bp)となる。
....実行の終了
実行の終了時には、
1. 戻り値を%axに代入する(%axに入らない戻り値は別途考える)
2. ローカル変数用に減算した値を%spに加算する
3. %bpをpopする
4. retで戻る

仮仕様
戻り値が4バイトなら、%dx:%axに入れる
戻り値が8バイトなら？
..制御構文
所謂普通の「フロー制御」

各構文ごとに連番を振り、ラベルを生成する。

「変換後の出力」に書いてある条件分岐命令は、
実際には「条件を満たしていなかったら、
jmpで飛ぶ処理をスキップする」というように実装すること。
条件分岐命令は、飛び先が遠すぎると失敗することがある。
...if
条件分岐。
if - elseif - else - endif
....構文
work0
if A
	work1
elseif B
	work2
else
	work3
endif
work4
....変換後の出力
	work0
	A
	jz ___if0_label0
	work1
	jmp ___if0_end
___if0_label0:
	B
	jz ___if0_label1
	work2
	jmp ___if0_end
___if0_label1:
	work3
___if0_end:
	work4
...while
条件を満たす間繰り返し。
ループの処理に入る前に判定する。
while - wend

continue / break も使用可能
....構文
work0
while A
	work1
wend
work2
....変換後の出力
	work0
___while0_start
	A
	jz ___while0_end
	work1
	jmp ___while0_start
___while0_end
	work2
...dowhile
条件を満たす間繰り返す。
ループの処理をした後で条件を判定する。
do - dowhile

continue / break も使用可能
....構文
work0
do
	work1
dowhile A
work2
....変換後の出力
	work0
___dowhile0_start
	work1
___dowhile0_continue
	A
	jnz ___dowhile0_start
___dowhile0_end
	work2
...repeat
無限ループ。
repeat - loop

continue / break も使用可能。
....構文
work0
repeat
	work1
loop
work2
....変換後の出力
	work0
___repeat0_start
	work1
	jmp ___repeat0_start
___repeat_end
	work2
